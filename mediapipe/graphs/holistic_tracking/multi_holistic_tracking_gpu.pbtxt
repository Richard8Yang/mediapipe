type: "MultiHolisticTrackingGpu"

# GPU buffer. (GpuBuffer)
input_stream: "input_video"

input_side_packet: "SMOOTH_LANDMARKS:smooth_landmarks"
input_side_packet: "ENABLE_SEGMENTATION:enable_segmentation"
input_side_packet: "SMOOTH_SEGMENTATION:smooth_segmentation"
input_side_packet: "MODEL_COMPLEXITY:model_complexity"
input_side_packet: "REFINE_FACE_LANDMARKS:refine_face_landmarks"

# GPU image with rendered results. (GpuBuffer)
output_stream: "output_video"

# Throttles the images flowing downstream for flow control. It passes through
# the very first incoming image unaltered, and waits for downstream nodes
# (calculators and subgraphs) in the graph to finish their tasks before it
# passes through another image. All images that come in while waiting are
# dropped, limiting the number of in-flight images in most part of the graph to
# 1. This prevents the downstream nodes from queuing up incoming images and data
# excessively, which leads to increased latency and memory usage, unwanted in
# real-time mobile applications. It also eliminates unnecessarily computation,
# e.g., the output produced by a node may get dropped downstream if the
# subsequent nodes are still busy processing previous inputs.
node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_video"
  input_stream: "FINISHED:output_video"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_video"
  node_options: {
    [type.googleapis.com/mediapipe.FlowLimiterCalculatorOptions] {
      max_in_flight: 1
      max_in_queue: 1
      # Timeout is disabled (set to 0) as first frame processing can take more
      # than 1 second.
      in_flight_timeout: 0
    }
  }
}

# Gets image size.
node {
  calculator: "ImagePropertiesCalculator"
  input_stream: "IMAGE_GPU:throttled_input_video"
  output_stream: "SIZE:image_size"
}

node {
  calculator: "MultiPoseDetectorGpu"
  #input_side_packet: "NUM_POSES:num_poses"
  input_stream: "IMAGE:throttled_input_video"
  input_stream: "IMAGE_SIZE:image_size"
  input_stream: "ROI_FROM_LANDMARKS:multi_pose_roi_from_landmarks"
  output_stream: "ROI_FROM_DETECTION:multi_pose_roi_from_detection"
}

node {
  calculator: "BeginLoopNormalizedRectCalculator"
  input_stream: "ITERABLE:multi_pose_roi_from_detection"
  input_stream: "CLONE:0:throttled_input_video"
  input_stream: "CLONE:1:image_size"
  output_stream: "ITEM:single_pose_roi_from_detection"
  output_stream: "CLONE:0:image_for_landmarks"
  output_stream: "CLONE:1:image_size_for_landmarks"
  output_stream: "BATCH_END:pose_rects_timestamp"
}

node {
  calculator: "SingleHolisticTrackerGpu"
  input_side_packet: "SMOOTH_LANDMARKS:smooth_landmarks"
  input_side_packet: "MODEL_COMPLEXITY:model_complexity"
  input_side_packet: "ENABLE_SEGMENTATION:enable_segmentation"
  input_side_packet: "SMOOTH_SEGMENTATION:smooth_segmentation"
  input_side_packet: "REFINE_FACE_LANDMARKS:refine_face_landmarks"
  input_stream: "IMAGE:image_for_landmarks"
  input_stream: "IMAGE_SIZE:image_size_for_landmarks"
  input_stream: "ROI_FROM_DETECTION:single_pose_roi_from_detection"
  output_stream: "POSE_LANDMARKS:pose_landmarks"
  output_stream: "WORLD_LANDMARKS:pose_world_landmarks"
  output_stream: "FACE_LANDMARKS:face_landmarks"
  output_stream: "LEFT_HAND_LANDMARKS:left_hand_landmarks"
  output_stream: "RIGHT_HAND_LANDMARKS:right_hand_landmarks"
  #output_stream: "SEGMENTATION_MASK:segmentation_mask"
  output_stream: "ROI_FROM_LANDMARKS:pose_roi_from_landmarks"
}

# Converts pose, hands and face landmarks to a render data vector.
node {
  calculator: "MultiHolisticTrackingToRenderData"
  input_stream: "IMAGE_SIZE:image_size_for_landmarks"
  input_stream: "POSE_LANDMARKS:pose_landmarks"
  input_stream: "POSE_ROI:pose_roi_from_landmarks"
  input_stream: "LEFT_HAND_LANDMARKS:left_hand_landmarks"
  input_stream: "RIGHT_HAND_LANDMARKS:right_hand_landmarks"
  input_stream: "FACE_LANDMARKS:face_landmarks"
  output_stream: "RENDER_DATA_POSE:landmarks_render_data"
  output_stream: "RENDER_DATA_BGJOINTS:landmarks_background_joints_render_data"
  output_stream: "RENDER_DATA_LJOINTS:landmarks_left_joints_render_data"
  output_stream: "RENDER_DATA_RJOINTS:landmarks_right_joints_render_data"
  output_stream: "RENDER_DATA_LHCON:left_hand_landmarks_connections_rd"
  output_stream: "RENDER_DATA_LHJOINTS:left_hand_landmarks_joints_rd"
  output_stream: "RENDER_DATA_RHCON:right_hand_landmarks_connections_rd"
  output_stream: "RENDER_DATA_RHJOINTS:right_hand_landmarks_joints_rd"
  output_stream: "RENDER_DATA_FCON:face_landmarks_connections_rd"
  output_stream: "RENDER_DATA_FJOINTS:face_landmarks_joints_rd"
}

node {
  calculator: "EndLoopRenderDataCalculator"
  input_stream: "ITEM:landmarks_render_data"
  input_stream: "BATCH_END:pose_rects_timestamp"
  output_stream: "ITERABLE:multi_landmarks_render_data"
}
node {
  calculator: "EndLoopRenderDataCalculator"
  input_stream: "ITEM:landmarks_background_joints_render_data"
  input_stream: "BATCH_END:pose_rects_timestamp"
  output_stream: "ITERABLE:multi_landmarks_background_joints_render_data"
}
node {
  calculator: "EndLoopRenderDataCalculator"
  input_stream: "ITEM:landmarks_left_joints_render_data"
  input_stream: "BATCH_END:pose_rects_timestamp"
  output_stream: "ITERABLE:multi_landmarks_left_joints_render_data"
}
node {
  calculator: "EndLoopRenderDataCalculator"
  input_stream: "ITEM:landmarks_right_joints_render_data"
  input_stream: "BATCH_END:pose_rects_timestamp"
  output_stream: "ITERABLE:multi_landmarks_right_joints_render_data"
}
node {
  calculator: "EndLoopRenderDataCalculator"
  input_stream: "ITEM:left_hand_landmarks_connections_rd"
  input_stream: "BATCH_END:pose_rects_timestamp"
  output_stream: "ITERABLE:multi_left_hand_landmarks_connections_rd"
}
node {
  calculator: "EndLoopRenderDataCalculator"
  input_stream: "ITEM:left_hand_landmarks_joints_rd"
  input_stream: "BATCH_END:pose_rects_timestamp"
  output_stream: "ITERABLE:multi_left_hand_landmarks_joints_rd"
}
node {
  calculator: "EndLoopRenderDataCalculator"
  input_stream: "ITEM:right_hand_landmarks_connections_rd"
  input_stream: "BATCH_END:pose_rects_timestamp"
  output_stream: "ITERABLE:multi_right_hand_landmarks_connections_rd"
}
node {
  calculator: "EndLoopRenderDataCalculator"
  input_stream: "ITEM:right_hand_landmarks_joints_rd"
  input_stream: "BATCH_END:pose_rects_timestamp"
  output_stream: "ITERABLE:multi_right_hand_landmarks_joints_rd"
}
node {
  calculator: "EndLoopRenderDataCalculator"
  input_stream: "ITEM:face_landmarks_connections_rd"
  input_stream: "BATCH_END:pose_rects_timestamp"
  output_stream: "ITERABLE:multi_face_landmarks_connections_rd"
}
node {
  calculator: "EndLoopRenderDataCalculator"
  input_stream: "ITEM:face_landmarks_joints_rd"
  input_stream: "BATCH_END:pose_rects_timestamp"
  output_stream: "ITERABLE:multi_face_landmarks_joints_rd"
}

node {
  calculator: "EndLoopNormalizedRectCalculator"
  input_stream: "ITEM:pose_roi_from_landmarks"
  input_stream: "BATCH_END:pose_rects_timestamp"
  output_stream: "ITERABLE:multi_pose_roi_from_landmarks"
}

node {
  calculator: "EndLoopLandmarkListVectorCalculator"
  input_stream: "ITEM:pose_world_landmarks"
  input_stream: "BATCH_END:pose_rects_timestamp"
  output_stream: "ITERABLE:multi_pose_world_landmarks"
}

node {
  calculator: "EndLoopNormalizedLandmarkListVectorCalculator"
  input_stream: "ITEM:pose_landmarks"
  input_stream: "BATCH_END:pose_rects_timestamp"
  output_stream: "ITERABLE:multi_pose_landmarks"
}
node {
  calculator: "EndLoopNormalizedLandmarkListVectorCalculator"
  input_stream: "ITEM:face_landmarks"
  input_stream: "BATCH_END:pose_rects_timestamp"
  output_stream: "ITERABLE:multi_face_landmarks"
}
node {
  calculator: "EndLoopNormalizedLandmarkListVectorCalculator"
  input_stream: "ITEM:left_hand_landmarks"
  input_stream: "BATCH_END:pose_rects_timestamp"
  output_stream: "ITERABLE:multi_left_hand_landmarks"
}
node {
  calculator: "EndLoopNormalizedLandmarkListVectorCalculator"
  input_stream: "ITEM:right_hand_landmarks"
  input_stream: "BATCH_END:pose_rects_timestamp"
  output_stream: "ITERABLE:multi_right_hand_landmarks"
}

# Draws annotations and overlays them on top of the input images.
node {
  calculator: "AnnotationOverlayCalculator"
  input_stream: "IMAGE_GPU:throttled_input_video"
  input_stream: "VECTOR:0:multi_landmarks_render_data"
  input_stream: "VECTOR:1:multi_landmarks_background_joints_render_data"
  input_stream: "VECTOR:2:multi_landmarks_left_joints_render_data"
  input_stream: "VECTOR:3:multi_landmarks_right_joints_render_data"
  input_stream: "VECTOR:4:multi_left_hand_landmarks_connections_rd"
  input_stream: "VECTOR:5:multi_left_hand_landmarks_joints_rd"
  input_stream: "VECTOR:6:multi_right_hand_landmarks_connections_rd"
  input_stream: "VECTOR:7:multi_right_hand_landmarks_joints_rd"
  input_stream: "VECTOR:8:multi_face_landmarks_connections_rd"
  input_stream: "VECTOR:9:multi_face_landmarks_joints_rd"
  input_stream: "VECTOR:10:multi_face_landmarks_joints_rd"
  output_stream: "IMAGE_GPU:output_video"
}
